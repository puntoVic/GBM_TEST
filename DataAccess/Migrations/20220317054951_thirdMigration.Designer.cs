// <auto-generated />
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220317054951_thirdMigration")]
    partial class thirdMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cash")
                        .HasColumnType("int");

                    b.HasKey("AccountId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Entities.Issuer", b =>
                {
                    b.Property<string>("Issuer_Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("Shares_Price")
                        .HasColumnType("int");

                    b.Property<int>("Total_Shares")
                        .HasColumnType("int");

                    b.HasKey("Issuer_Name");

                    b.HasIndex("AccountId");

                    b.ToTable("Issuer");
                });

            modelBuilder.Entity("Entities.Transaction", b =>
                {
                    b.Property<string>("IdTransaction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Issuer_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Issuer_Name1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Operation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Shares_Prices")
                        .HasColumnType("int");

                    b.Property<string>("Timestamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Total_Shares")
                        .HasColumnType("int");

                    b.HasKey("IdTransaction");

                    b.HasIndex("AccountId");

                    b.HasIndex("Issuer_Name1");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Entities.Issuer", b =>
                {
                    b.HasOne("Entities.Account", "Account")
                        .WithMany("Issuers")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Transaction", b =>
                {
                    b.HasOne("Entities.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Issuer", "Issuer")
                        .WithMany()
                        .HasForeignKey("Issuer_Name1");
                });
#pragma warning restore 612, 618
        }
    }
}
